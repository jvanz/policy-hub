# This action is ran manually or via the dedicated `workflow` API of GitHub.
#
# The action receives as input the name of the GitHub repository that
# holds the policy, plus the tag associate with the release event of
# that policy.
#
# The action downloads the `hub.yml` file from the repository mentioned
# by the input variables.
# The action then replaces the special `__TAG__` string inside of the
# `hub.json` file with the value of the `tag` it received at invocation
# time.
#
# The action uses yq to convert the incoming yml data to json format
# and saves the output to `web/policies/<org name>:<policy name>.json`
#
# Finally, the action creates a PR against this repository with the
# changes done to the file.

name: Update policy data

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Name of the repository that contains the policy (e.g.: kubewarden/psp-apparmor)"
        required: true
      tag:
        description: "Tag identifying policy release"
        required: true
      oci-target:
        description: "OCI Target of the released policy"
        required: true

jobs:
  update-policy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install kwctl
        uses: jvanz/github-actions/kwctl-installer@kwctl-zip-releases

      - name: generate signature verification file
        run: kwctl scaffold verification-config > verification_config.yaml

      - name: check if policy is signed by Kubewarden organization
        run: kwctl verify --verification-config-path ./verification_config.yaml  ${{ github.event.inputs.oci-target }}:${{ github.event.inputs.tag}}

      - name: Check presence of hub metadata inside of remote repo
        run: |
          HTTP_CODE=$(curl --head -s -o /dev/null -w "%{http_code}" \
            https://raw.githubusercontent.com/${{ github.event.inputs.repository }}/${{ github.event.inputs.tag }}/hub.yml)
          (( $HTTP_CODE == 200 ))

      - name: download yq
        run: |
          curl -L https://github.com/mikefarah/yq/releases/download/v4.7.0/yq_linux_amd64 -o yq
          chmod 755 yq

      - name: fetch policy definition and marked as trusted
        run: |
          export OUTPUT=$(echo ${{ github.event.inputs.repository }} | sed -e "s|/|:|")
          curl https://raw.githubusercontent.com/${{ github.event.inputs.repository }}/${{ github.event.inputs.tag }}/hub.yml | \
            sed -e "s|__TAG__|${{ github.event.inputs.tag }}|g" | \
            ./yq eval -j > web/policies/${OUTPUT}.json
          jq ".signed |= true"  web/policies/${OUTPUT}.json

      # This is needed otherwise the PR will include the yq binary too
      - name: remove yq
        run: rm -f yq

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: 'Update policy ${{ github.event.inputs.repository}} to release ${{ github.event.inputs.tag }}'
          branch: 'update-${{ github.event.inputs.repository }}'
          delete-branch: true
          title: 'Track new release of policy ${{ github.event.inputs.repository }}'
          body: |
            Update data source for policy `${{ github.event.inputs.repository }}` to track release `${{ github.event.inputs.tag }}`.

            Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request

      - name: Check PR outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

